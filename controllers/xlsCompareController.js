require("dotenv").config();
const multer = require("multer");
const xlsx = require("xlsx");
const ExcelJS = require("exceljs");
const fs = require("fs");
const path = require("path");
const OpenAI = require("openai");

// Load environment variables
const BASE_URL = process.env.BASE_URL || "http://localhost:3000";

// OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

// Ensure upload directory exists
const uploadPath = path.join(__dirname, "../uploads/");
if (!fs.existsSync(uploadPath)) {
  fs.mkdirSync(uploadPath, { recursive: true });
}

// Multer setup for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadPath),
  filename: (req, file, cb) => cb(null, Date.now() + "-" + file.originalname),
});

const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    if (!file.originalname.match(/\.(xlsx)$/)) {
      return cb(new Error("Csak .xlsx f√°jlokat lehet felt√∂lteni!"));
    }
    cb(null, true);
  },
  limits: { fileSize: 10 * 1024 * 1024 },
}).array("files", 2);

// Function to get column name from letter
function getColumnName(sheet, columnLetter) {
  const range = xlsx.utils.decode_range(sheet["!ref"]);
  const colIndex = xlsx.utils.decode_col(columnLetter);
  const firstRow = range.s.r;

  for (let c = 0; c <= range.e.c; c++) {
    const cellAddress = xlsx.utils.encode_cell({ r: firstRow, c: c });
    if (sheet[cellAddress] && c === colIndex) {
      return sheet[cellAddress].v;
    }
  }
  return null;
}

// Function to compare Excel files
function compareExcelFiles(file1, file2, keyColumnLetter) {
    const workbook1 = xlsx.readFile(file1);
    const workbook2 = xlsx.readFile(file2);
  
    const sheet1 = workbook1.Sheets[workbook1.SheetNames[0]];
    const sheet2 = workbook2.Sheets[workbook2.SheetNames[0]];
  
    // Get column name from the letter
    const keyColumn = getColumnName(sheet1, keyColumnLetter);
    if (!keyColumn) throw new Error("Invalid column letter for identifier.");
  
    const data1 = xlsx.utils.sheet_to_json(sheet1, { defval: "" });
    const data2 = xlsx.utils.sheet_to_json(sheet2, { defval: "" });
  
    let resultForExcel = [];  // Ez ker√ºl az Excel f√°jlba (minden adattal)
    let changesForFrontend = [];  // Ez ker√ºl vissza a frontendnek (csak ID + v√°ltoz√°sok)
  
    // Convert data into a key-value mapping for easier comparison
    let oldDataMap = new Map(data1.map((row) => [row[keyColumn], row]));
    let newDataMap = new Map(data2.map((row) => [row[keyColumn], row]));
  
    let allKeys = new Set([...oldDataMap.keys(), ...newDataMap.keys()]);
  
    allKeys.forEach((key) => {
      const oldRow = oldDataMap.get(key) || null;
      const newRow = newDataMap.get(key) || null;
  
      if (!oldRow) {
        // √öj sor: minden adat beker√ºl az Excelbe, de a frontendre csak az ID
        newRow._status = "new";
        resultForExcel.push(newRow);
        changesForFrontend.push({ [keyColumn]: key, _status: "new" });
      } else if (!newRow) {
        // T√∂r√∂lt sor: minden adat beker√ºl az Excelbe, de a frontendre csak az ID
        oldRow._status = "deleted";
        resultForExcel.push(oldRow);
        changesForFrontend.push({ [keyColumn]: key, _status: "deleted" });
      } else {
        // M√≥dos√≠tott sor: teljes sor beker√ºl az Excelbe, de a frontendre csak ID + v√°ltoz√°sok
        let modifiedRow = { ...newRow };
        let modifiedRowForFrontend = { [keyColumn]: key };
        let modified = false;
  
        Object.keys(newRow).forEach((col) => {
          if (col !== keyColumn && oldRow[col] !== newRow[col]) {
            modifiedRow[col] = `${newRow[col]} (r√©gi: ${oldRow[col]})`;
            modifiedRowForFrontend[col] = `${newRow[col]} (r√©gi: ${oldRow[col]})`;
            modified = true;
          }
        });
  
        if (modified) {
          resultForExcel.push(modifiedRow);
          changesForFrontend.push(modifiedRowForFrontend);
        } else {
          resultForExcel.push(newRow); // Ha nincs v√°ltoz√°s, akkor csak sim√°n be√≠rjuk
        }
      }
    });
  
    return { resultForExcel, changesForFrontend };
  }

// Function to create a comparison Excel file
async function createComparisonExcel(data, outputPath) {
    if (!data || !Array.isArray(data) || data.length === 0) {
      console.warn("‚ö†Ô∏è  Az √∂sszehasonl√≠t√°si adatok √ºresek vagy hib√°sak.");
      return;
    }
  
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet("Comparison");
  
    // Sz√≠nez√©si szab√°lyok
    const yellowFill = { type: "pattern", pattern: "solid", fgColor: { argb: "00AB60" } }; // √öj sorok
    const redFill = { type: "pattern", pattern: "solid", fgColor: { argb: "FF7070" } }; // T√∂r√∂lt sorok
    const orangeFill = { type: "pattern", pattern: "solid", fgColor: { argb: "FDE471" } }; // M√≥dos√≠tott cell√°k
    const headerFill = { type: "pattern", pattern: "solid", fgColor: { argb: "D3D3D3" } }; // Fejl√©c h√°tt√©r (halv√°ny sz√ºrke)
    const headerFont = { bold: true }; // Fejl√©c bet≈±t√≠pus (f√©lk√∂v√©r)
  
    // Oszlopok be√°ll√≠t√°sa (a `_status` oszlopot kiz√°rjuk)
    const columns = Object.keys(data[0]).filter((col) => col !== "_status");
    worksheet.columns = columns.map((col) => ({ header: col, key: col, width: 20 }));

     // Fejl√©c form√°z√°sa (f√©lk√∂v√©r bet≈± + sz√ºrke h√°tt√©r)
     worksheet.getRow(1).eachCell((cell) => {
        cell.fill = headerFill;
        cell.font = headerFont;
    });
  
    // Sorok beilleszt√©se
    data.forEach((row) => {
      const newRow = worksheet.addRow(row);
  
      if (row._status === "new") {
        newRow.eachCell((cell) => cell.fill = yellowFill); // √öj sorok kiemel√©se
      } else if (row._status === "deleted") {
        newRow.eachCell((cell) => cell.fill = redFill); // T√∂r√∂lt sorok kiemel√©se
      } else {
        // M√≥dos√≠tott cell√°k kezel√©se
        newRow.eachCell((cell, colNumber) => {
          const colKey = worksheet.columns[colNumber - 1].key; // Oszlopn√©v lek√©r√©se
          if (row[colKey] && String(row[colKey]).includes("(r√©gi:")) {
            // Sz√©tv√°lasztjuk az √∫j √©s r√©gi √©rt√©ket
            const newValue = row[colKey].split(" (r√©gi: ")[0];
            const oldValue = row[colKey].match(/\(r√©gi: (.*)\)/)?.[1];
  
            if (oldValue) {
              // Csak az √∫j √©rt√©ket hagyjuk a cell√°ban
              cell.value = newValue;
              cell.fill = orangeFill; // Sz√≠nez√©s
  
              // Megjegyz√©s (r√©gi √©rt√©k megjelen√≠t√©se)
              cell.note = `R√©gi √©rt√©k: ${oldValue}`;
            }
          }
        });
      }
    });
  
    try {
      await workbook.xlsx.writeFile(outputPath);
      console.log(`üìÑ Excel f√°jl sikeresen l√©trehozva: ${outputPath}`);
    } catch (error) {
      console.error("‚ùå Hiba t√∂rt√©nt az Excel f√°jl ment√©se k√∂zben:", error);
    }
  }

// API endpoint to handle Excel comparison
exports.compareExcel = async (req, res) => {
    upload(req, res, async (err) => {
      if (err) {
        return res.status(500).json({ error: `F√°jlfelt√∂lt√©si hiba: ${err.message}` });
      }
  
      if (!req.files || req.files.length !== 2 || !req.body.columnLetter) {
        return res.status(400).json({ error: "K√©rlek t√∂lts fel k√©t f√°jlt √©s adj meg egy oszlop bet≈±jel√©t!" });
      }
  
      const file1 = req.files[0].path;
      const file2 = req.files[1].path;
      const columnLetter = req.body.columnLetter.toUpperCase();
  
      try {
        // üìå 1Ô∏è‚É£ Excel √∂sszehasonl√≠t√°s v√©grehajt√°sa
        const { resultForExcel, changesForFrontend } = compareExcelFiles(file1, file2, columnLetter);
  
        // üìå 2Ô∏è‚É£ Az √∂sszehasonl√≠t√°s eredm√©ny√©nek OpenAI API-hoz k√ºld√©se
        let aiReply = "";
        if (changesForFrontend.length > 0) {
          const promptText = `
            Itt van egy Excel f√°jl √∂sszehasonl√≠t√°s√°nak eredm√©nye:
            ${JSON.stringify(changesForFrontend.slice(0, 10), null, 2)}
            
             K√©rlek, elemezd √©s adj egy r√∂vid sz√∂veges √∂sszefoglal√≥t HTML form√°tumban a v√°ltoz√°sokr√≥l. Ne haszn√°lj <ul>, <li> vagy m√°s listaelemeket, csak sima bekezd√©seket (<p>), √©s fogalmazz term√©szetesen, mintha egy ember r√∂viden √∂sszefoglaln√° sz√≥ban.`;
  
          const aiResponse = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "system", content: "Excel f√°jlok √∂sszehasonl√≠t√°sa r√∂vid ismertet√©shez. Csak <p> tageket haszn√°lj, ne haszn√°lj list√°kat, √©s fogalmazz term√©szetesen." },
                       { role: "user", content: promptText }],
            max_tokens: 300
          });
  
          aiReply = aiResponse.choices[0].message.content;
        }
  
        // üìå 3Ô∏è‚É£ Az √∂sszehasonl√≠t√°s eredm√©ny√©nek Excel f√°jlba ment√©se (TELJES adatokkal)
        const outputPath = path.join(uploadPath, "comparison_result.xlsx");
        await createComparisonExcel(resultForExcel, outputPath);
  
        fs.unlinkSync(file1);
        fs.unlinkSync(file2);
  
        // üìå 4Ô∏è‚É£ Eredm√©nyek visszak√ºld√©se a frontendnek (CSAK AZ ID + V√ÅLTOZOTT MEZ≈êK)
        res.json({
            changes: changesForFrontend.map(change => JSON.stringify(change)),  // üìå Minden objektumot JSON stringg√© alak√≠tunk
            fileUrl: `${BASE_URL}/uploads/comparison_result.xlsx`,
            aiReply
        });
  
      } catch (error) {
        console.error("Hiba az √∂sszehasonl√≠t√°s sor√°n:", error);
        res.status(500).json({ error: "Hiba t√∂rt√©nt az √∂sszehasonl√≠t√°s sor√°n." });
      }
    });
  };