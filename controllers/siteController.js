const Site = require('../models/site'); // Import√°ljuk a Site modellt
const User = require('../models/user'); // Import√°ljuk a User modellt
const Zone = require('../models/zone'); // Ez kell a file tetej√©re is
const Equipment = require('../models/dataplate'); // üëà import√°ljuk a modell tetej√©n
const { getOrCreateFolder } = require('../controllers/graphController');
const mongoose = require('mongoose');

// üîπ √öj site l√©trehoz√°sa
exports.createSite = async (req, res) => {
    try {
        const CreatedBy = req.userId;
        const Company = req.user.company;

        if (!Company) {
            return res.status(400).json({ message: "Company is missing in token" });
        }

        // üîé Felhaszn√°l√≥ lek√©r√©se tenantId ellen≈ërz√©shez
        const user = await User.findById(CreatedBy);
        const hasEntraID = !!user?.tenantId;

        // 1Ô∏è‚É£ Site l√©trehoz√°sa √©s ment√©se
        const newSite = new Site({
            Name: req.body.Name,
            Client: req.body.Client,
            CreatedBy: CreatedBy,
            Company: Company,
        });

        await newSite.save();

        // 2Ô∏è‚É£ OneDrive mappa l√©trehoz√°sa CSAK Entra ID-s usern√©l
        const accessToken = req.headers['x-ms-graph-token'];
        if (hasEntraID && accessToken) {
            console.log('üîê Entra ID-s user. Access token megvan, pr√≥b√°ljuk l√©trehozni a mapp√°t...');
        
            const folderPath = `ExAI/Projects/${newSite.Name}`;
            const folderResult = await getOrCreateFolder(accessToken, folderPath);
        
            console.log('üìÅ OneDrive folder result:', folderResult);
        
            if (folderResult && folderResult.folderId) {
                newSite.oneDriveFolderUrl = folderResult.folderUrl;
                await newSite.save();
                console.log(`‚úÖ OneDrive mappa l√©trej√∂tt: ${folderPath}`);
            } else {
                console.warn(`‚ö†Ô∏è Nem siker√ºlt l√©trehozni a mapp√°t: ${folderPath}`);
            }
        } else {
            console.log(`üîπ OneDrive mappa kihagyva. hasEntraID: ${hasEntraID}, token: ${!!accessToken}`);
        }

        // 4Ô∏è‚É£ V√°lasz kik√ºld√©se
        res.status(201).json(newSite);
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};

// üîπ √ñsszes site list√°z√°sa
exports.getAllSites = async (req, res) => {
    try {
        const sites = await Site.find().populate('CreatedBy', 'firstName lastName nickname company'); // Bet√∂ltj√ºk a user adatait is
        res.status(200).json(sites);
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};

// üîπ Egy site lek√©r√©se ID alapj√°n
exports.getSiteById = async (req, res) => {
    try {
        const siteId = req.params.id || req.query.siteId; // ‚ö†Ô∏è Kereshet√ºnk params-ban √©s query-ben is
        if (!siteId) {
            return res.status(400).json({ message: "Missing site ID" });
        }

        const site = await Site.findById(siteId).populate('CreatedBy', 'firstName lastName nickname company');
        if (!site) {
            return res.status(404).json({ message: "Site not found" });
        }

        res.status(200).json(site);
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};

// üîπ Site m√≥dos√≠t√°sa
exports.updateSite = async (req, res) => {
    try {
        const { Name, Client, CreatedBy } = req.body;

        // Ellen≈ërizz√ºk, hogy l√©tezik-e a m√≥dos√≠tani k√≠v√°nt site
        let site = await Site.findById(req.params.id);
        if (!site) {
            return res.status(404).json({ message: "Site not found" });
        }

        // Ha v√°ltozik a CreatedBy, akkor friss√≠tj√ºk a Company mez≈ët is
        if (CreatedBy && CreatedBy !== site.CreatedBy.toString()) {
            const user = await User.findById(CreatedBy);
            if (!user) {
                return res.status(404).json({ message: "User not found" });
            }
            site.Company = user.company;
        }

        // M√≥dos√≠t√°sok alkalmaz√°sa
        site.Name = Name || site.Name;
        site.Client = Client || site.Client;
        site.CreatedBy = CreatedBy || site.CreatedBy;

        await site.save();
        res.status(200).json(site);
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};

// üîπ Site t√∂rl√©se
exports.deleteSite = async (req, res) => {
    try {
        const siteId = req.params.id;

        // 1Ô∏è‚É£ T√∂r√∂lj√ºk az √∂sszes eszk√∂zt, ami ehhez a site-hoz tartozik
        await Equipment.deleteMany({ Site: siteId });

        // 2Ô∏è‚É£ T√∂r√∂lj√ºk az √∂sszes z√≥n√°t, ami ehhez a site-hoz tartozik
        await Zone.deleteMany({ Site: siteId });

        // 3Ô∏è‚É£ V√©g√ºl t√∂r√∂lj√ºk a site-ot
        const site = await Site.findByIdAndDelete(siteId);
        if (!site) {
            return res.status(404).json({ message: "Site not found" });
        }

        res.status(200).json({ message: "Site, related zones and equipment deleted successfully" });
    } catch (error) {
        res.status(500).json({ message: "Server error", error: error.message });
    }
};