const Zone = require('../models/zone'); // A Zone modell import√°l√°sa
const User = require('../models/user'); 
const Equipment = require('../models/dataplate'); // üëà hozz√°adand√≥ a f√°jl tetej√©re
const mongoose = require('mongoose');
const { getOrCreateFolder } = require('../controllers/graphController');



// √öj z√≥na l√©trehoz√°sa
exports.createZone = async (req, res) => {
    try {
        const createdBy = req.user.id;
        const Company = req.user.company;
        const modifiedBy = req.user.id;
        

        if (!Company) {
            return res.status(400).json({ message: "Company is missing in token" });
        }

        const zone = new Zone({
            ...req.body,
            CreatedBy: createdBy,
            ModifiedBy: modifiedBy,
            Company: Company,
        });

        await zone.save();

        const accessToken = req.headers['x-ms-graph-token'];
        if (accessToken) {
            const relatedSite = await require('../models/site').findById(zone.Site);
            if (relatedSite) {
                const folderPath = `ExAI/Projects/${relatedSite.Name}/${zone.Name}`;
                const folderResult = await getOrCreateFolder(accessToken, folderPath);

                if (folderResult && folderResult.folderId) {
                    zone.oneDriveFolderUrl = folderResult.folderUrl;
                    await zone.save(); // üíæ √∫jra mentj√ºk a friss√≠tett mez≈ëkkel

                    console.log(`‚úÖ Z√≥na mappa l√©trej√∂tt: ${folderPath}`);
                } else {
                    console.warn(`‚ö†Ô∏è Nem siker√ºlt l√©trehozni a z√≥na mapp√°t: ${folderPath}`);
                }
            } else {
                console.warn("‚ö†Ô∏è A z√≥n√°hoz tartoz√≥ Site nem tal√°lhat√≥, mappa nem j√∂tt l√©tre.");
            }
        }

        res.status(201).json({ message: 'Zone created successfully', zone });
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
};

// √ñsszes z√≥na lek√©rdez√©se siteId szerint sz≈±rve
exports.getZones = async (req, res) => {
    try {
        const { siteId } = req.query; // üìå Az URL query param√©ter√©b≈ël kapjuk a siteId-t
        const userCompany = req.user.company; // üìå Tokenb≈ël kapott felhaszn√°l√≥i c√©g

        if (!userCompany) {
            return res.status(400).json({ message: "Company is missing in token" });
        }

        let query = { Company: userCompany }; // üîπ Csak a bejelentkezett c√©g z√≥n√°i

        if (siteId) {
            if (!mongoose.Types.ObjectId.isValid(siteId)) {
                console.error('Invalid siteId:', siteId); // üîç Konzol log a szerver oldalon
                return res.status(400).json({ message: "Invalid siteId format" });
            }
            query.Site = new mongoose.Types.ObjectId(siteId); // üîπ Biztos√≠tjuk, hogy ObjectId form√°tum√∫ legyen
        }

        console.log('Query being executed:', query); // üîç Debug log

        const zones = await Zone.find(query).populate('CreatedBy', 'nickname');
        res.status(200).json(zones);
    } catch (error) {
        console.error('Error fetching zones:', error);
        res.status(500).json({ error: error.message });
    }
};

// Egy konkr√©t z√≥na lek√©rdez√©se ID alapj√°n
exports.getZoneById = async (req, res) => {
    try {
        const zone = await Zone.findById(req.params.id).populate('CreatedBy', 'nickname');
        if (!zone) {
            return res.status(404).json({ error: 'Zone not found' });
        }
        res.status(200).json(zone);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Z√≥na m√≥dos√≠t√°sa ID alapj√°n
exports.updateZone = async (req, res) => {
    try {
        if (req.body.CreatedBy) {
            delete req.body.CreatedBy; // Ne engedj√ºk m√≥dos√≠tani a CreatedBy mez≈ët
        }

        const zone = await Zone.findByIdAndUpdate(req.params.id, req.body, { 
            new: true, 
            runValidators: true 
        });

        if (!zone) {
            return res.status(404).json({ error: 'Zone not found' });
        }
        res.status(200).json({ message: 'Zone updated successfully', zone });
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
};

// Z√≥na t√∂rl√©se ID alapj√°n
exports.deleteZone = async (req, res) => {
    try {
        const zoneId = req.params.id;

        // 1Ô∏è‚É£ T√∂r√∂lj√ºk az eszk√∂z√∂ket, amik ehhez a z√≥n√°hoz tartoznak
        await Equipment.deleteMany({ Zone: zoneId });

        // 2Ô∏è‚É£ T√∂r√∂lj√ºk mag√°t a z√≥n√°t
        const zone = await Zone.findByIdAndDelete(zoneId);
        if (!zone) {
            return res.status(404).json({ error: 'Zone not found' });
        }

        res.status(200).json({ message: 'Zone and related equipment deleted successfully' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};