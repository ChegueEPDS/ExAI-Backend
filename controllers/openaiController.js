/******************************************************************************************/ 
/*** Az OpenAI be√°ll√≠t√°sok lek√©rdez√©se, √©s m√≥dos√≠t√°sa. Asszisztens v√°laszt√°sa a userhez ***/
/******************************************************************************************/

const axios = require('axios');
const logger = require('../config/logger');
const assistants = require('../config/assistants');
const User = require('../models/user'); // Felhaszn√°l√≥i modell
const fs = require('fs');
const FormData = require('form-data');

// Seg√©df√ºggv√©ny: asszisztenshez tartoz√≥ vector store ID lek√©r√©se
async function getVectorStoreId(assistantId) {
  const response = await axios.get(`https://api.openai.com/v1/assistants/${assistantId}`, {
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      'OpenAI-Beta': 'assistants=v2'
    }
  });
  return response.data.tool_resources?.file_search?.vector_store_ids?.[0];
}

// üì• F√°jlok list√°z√°sa a vector store-b√≥l ‚Äì n√©vvel egy√ºtt
exports.listAssistantFiles = async (req, res) => {
  try {
    const user = await User.findById(req.userId).select('company');
    if (!user) return res.status(404).json({ error: 'Felhaszn√°l√≥ nem tal√°lhat√≥.' });

    const assistantId = assistants[user.company] || assistants['default'];
    const vectorStoreId = await getVectorStoreId(assistantId);
    if (!vectorStoreId) return res.status(404).json({ error: 'Nincs vector store t√°rs√≠tva az asszisztenshez.' });

    // Alap f√°jllista lek√©r√©se
    const fileRes = await axios.get(`https://api.openai.com/v1/vector_stores/${vectorStoreId}/files`, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'OpenAI-Beta': 'assistants=v2'
      }
    });

    const files = fileRes.data.data;

    // Minden f√°jlhoz lek√©rj√ºk a nev√©t is
    const detailedFiles = await Promise.all(
      files.map(async (file) => {
        try {
          const detailRes = await axios.get(`https://api.openai.com/v1/files/${file.id}`, {
            headers: {
              Authorization: `Bearer ${process.env.OPENAI_API_KEY}`
            }
          });
          return {
            id: file.id,
            filename: detailRes.data.filename,
            status: detailRes.data.status,
            bytes: detailRes.data.bytes,
            created_at: file.created_at 
          };
        } catch (err) {
          logger.warn(`Nem siker√ºlt lek√©rni a f√°jl r√©szleteit: ${file.id}`);
          return file; // visszat√©r az alap ID-val, ha nem siker√ºl
        }
      })
    );

    res.status(200).json(detailedFiles);
  } catch (err) {
    logger.error('‚ùå F√°jlok list√°z√°si hiba:', err.message);
    res.status(500).json({ error: 'Nem siker√ºlt lek√©rni a f√°jlokat.' });
  }
};

// üì§ F√°jl felt√∂lt√©se √©s hozz√°rendel√©se a vector store-hoz
exports.uploadAssistantFile = async (req, res) => {
  try {
    const user = await User.findById(req.userId).select('company');
    if (!user) return res.status(404).json({ error: 'Felhaszn√°l√≥ nem tal√°lhat√≥.' });

    const assistantId = assistants[user.company] || assistants['default'];
    const vectorStoreId = await getVectorStoreId(assistantId);
    if (!vectorStoreId) return res.status(404).json({ error: 'Nincs vector store t√°rs√≠tva az asszisztenshez.' });

    const file = req.file;
    if (!file || !file.path) return res.status(400).json({ error: 'Nem √©rkezett f√°jl a k√©r√©sben vagy hi√°nyzik az √∫tvonal.' });

    const form = new FormData();
    form.append('purpose', 'assistants'); // Ez el≈ëzze meg a f√°jlt
    form.append('file', fs.createReadStream(file.path), file.originalname);

    const uploadRes = await axios.post('https://api.openai.com/v1/files', form, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        ...form.getHeaders()
      },
      maxBodyLength: Infinity // nagy f√°jlokhoz is enged√©lyezve
    });

    const fileId = uploadRes.data.id;

    await axios.post(
      `https://api.openai.com/v1/vector_stores/${vectorStoreId}/files`,
      { file_id: fileId },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
          'OpenAI-Beta': 'assistants=v2'
        }
      }
    );

    try {
      fs.unlinkSync(file.path);
      logger.info(`F√°jl sikeresen t√∂r√∂lve: ${file.path}`);
    } catch (err) {
      logger.warn(`Nem siker√ºlt t√∂r√∂lni a felt√∂lt√∂tt f√°jlt: ${file.path}`);
    }

    res.status(201).json({ message: 'F√°jl sikeresen felt√∂ltve √©s hozz√°rendelve.', fileId });
  } catch (err) {
    logger.error('‚ùå F√°jl felt√∂lt√©si hiba:', err.message);
    logger.error('‚ùå Stacktrace:', err);
    res.status(500).json({ error: 'Nem siker√ºlt felt√∂lteni a f√°jlt.' });
  }
};

// üì§ F√°jl t√∂rl√©se a vector store-b√≥l √©s az OpenAI f√°jlt√°rb√≥l
exports.deleteAssistantFile = async (req, res) => {
  try {
    const user = await User.findById(req.userId).select('company');
    if (!user) return res.status(404).json({ error: 'Felhaszn√°l√≥ nem tal√°lhat√≥.' });

    const assistantId = assistants[user.company] || assistants['default'];
    const vectorStoreId = await getVectorStoreId(assistantId);
    if (!vectorStoreId) return res.status(404).json({ error: 'Nincs vector store t√°rs√≠tva az asszisztenshez.' });

    const { fileId } = req.params;
    if (!fileId) return res.status(400).json({ error: 'Hi√°nyz√≥ fileId param√©ter.' });

    // 1Ô∏è‚É£ F√°jl t√∂rl√©se a vector store-b√≥l
    await axios.delete(
      `https://api.openai.com/v1/vector_stores/${vectorStoreId}/files/${fileId}`,
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2'
        }
      }
    );

    // 2Ô∏è‚É£ F√°jl t√∂rl√©se az OpenAI f√°jlt√°rb√≥l
    await axios.delete(`https://api.openai.com/v1/files/${fileId}`, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`
      }
    });

    res.status(200).json({ message: 'F√°jl sikeresen t√∂r√∂lve.' });
  } catch (err) {
    logger.error('‚ùå F√°jl t√∂rl√©si hiba:', err.message);
    res.status(500).json({ error: 'Nem siker√ºlt t√∂r√∂lni a f√°jlt.' });
  }
};

// Lek√©rdezi az asszisztens utas√≠t√°sait
exports.getAssistantInstructions = async (req, res) => {
  try {
    const userId = req.userId;
    if (!userId) {
      logger.error('Hi√°nyz√≥ userId a k√©r√©sb≈ël.');
      return res.status(400).json({ error: 'Bejelentkezett felhaszn√°l√≥ azonos√≠t√≥ja hi√°nyzik.' });
    }

    // Felhaszn√°l√≥i adatok lek√©r√©se az adatb√°zisb√≥l
    const user = await User.findById(userId).select('company');
    if (!user) {
      logger.error('Felhaszn√°l√≥ nem tal√°lhat√≥.');
      return res.status(404).json({ error: 'Felhaszn√°l√≥ nem tal√°lhat√≥.' });
    }

    // Az asszisztens azonos√≠t√≥ kiv√°laszt√°sa a company alapj√°n
    const company = user.company;
    const assistantId = assistants[company] || assistants['default'];
    logger.info(`Lek√©rdezett asszisztens ID: ${assistantId} (Company: ${company})`);

    // OpenAI API h√≠v√°s az asszisztens utas√≠t√°sai√©rt
    const response = await axios.get(`https://api.openai.com/v1/assistants/${assistantId}`, {
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'OpenAI-Beta': 'assistants=v2',
      },
    });

    // Az utas√≠t√°sok a v√°laszb√≥l
    const instructions = response.data;
    logger.info('Asszisztens info lek√©rdezve:', instructions);

    // JSON form√°ban k√ºldi vissza a kliensnek
    res.status(200).json(instructions);
  } catch (error) {
    if (error.response) {
      // Az API v√°laszolt, de hib√°s st√°tuszk√≥dot adott
      logger.error('OpenAI API v√°lasz hiba:', {
        status: error.response.status,
        data: error.response.data,
      });
      res.status(error.response.status).json({
        error: error.response.data.error || 'Hiba t√∂rt√©nt az API lek√©rdez√©se sor√°n.',
      });
    } else if (error.request) {
      // A k√©r√©s elment, de nem √©rkezett v√°lasz
      logger.error('OpenAI API v√°lasz nem √©rkezett:', error.request);
      res.status(500).json({ error: 'Az OpenAI API nem √©rhet≈ë el.' });
    } else {
      // Valami m√°s hiba t√∂rt√©nt a k√©r√©s be√°ll√≠t√°s√°ban
      logger.error('K√©r√©s be√°ll√≠t√°si hiba:', error.message);
      res.status(500).json({ error: 'Bels≈ë szerver hiba t√∂rt√©nt.' });
    }
  }
};