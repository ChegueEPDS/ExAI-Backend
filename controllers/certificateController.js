const Certificate = require('../models/certificate');
const axios = require('axios');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { getOrCreateFolder } = require('../controllers/graphController'); // OneDrive mappakezel√©s


// Multer konfigur√°ci√≥ a f√°jl felt√∂lt√©shez
const upload = multer({ dest: 'uploads/' });

// F√°jl felt√∂lt√©si endpoint
exports.uploadCertificate = async (req, res) => {
  upload.single('file')(req, res, async (err) => {
      if (err) return res.status(500).send('‚ùå F√°jl felt√∂lt√©si hiba.');

      const accessToken = req.headers.authorization?.split(" ")[1];
      if (!accessToken) {
          return res.status(401).json({ message: "‚ùå Access token sz√ºks√©ges!" });
      }

      try {
        const { certNo, equipment, manufacturer, exmarking, xcondition, specCondition } = req.body;

          if (!certNo) {
              return res.status(400).json({ message: "‚ùå A certNo k√∂telez≈ë mez≈ë!" });
          }

          const filePath = path.resolve(req.file.path);
          const fileName = req.file.originalname;
          const folderName = "Certificates"; // üìÇ A f√°jlokat mindig az ExAI/Certificates mapp√°ba mentj√ºk

          // üìÇ Megn√©zz√ºk, hogy l√©tezik-e a "Certificates" mappa, ha nem, l√©trehozzuk
          const targetFolderId = await getOrCreateFolder(accessToken, folderName);

          // üìÑ F√°jl beolvas√°sa √©s felt√∂lt√©se a OneDrive "Certificates" mapp√°ba
          const fileData = fs.readFileSync(filePath);
          const uploadResponse = await axios.put(
              `https://graph.microsoft.com/v1.0/me/drive/items/${targetFolderId}:/${fileName}:/content`,
              fileData,
              {
                  headers: { 
                      Authorization: `Bearer ${accessToken}`, 
                      "Content-Type": "application/octet-stream" 
                  },
              }
          );

          const fileUrl = uploadResponse.data.webUrl; // üìé OneDrive f√°jl URL-je

          // üìÇ √öj tan√∫s√≠tv√°ny (Certificate) ment√©se MongoDB-be
          const certificate = new Certificate({
              certNo: certNo,
              equipment: equipment || 'N/A', // Ha √ºres, adjon meg egy alap√©rtelmezett √©rt√©ket
              manufacturer: manufacturer || 'N/A',
              exmarking: exmarking || 'N/A',
              fileName,
              fileUrl,
              xcondition: xcondition === 'true' || xcondition === true, // üîπ Biztos√≠tja a Boolean t√≠pust
              specCondition: specCondition || null
          });
          await certificate.save();

          fs.unlinkSync(filePath); // üìÑ Helyi f√°jl t√∂rl√©se
          res.json({
              message: "‚úÖ Felt√∂lt√©s sikeres!",
              fileUrl: fileUrl,
              data: certificate
          });
      } catch (error) {
          console.error("‚ùå Hiba a felt√∂lt√©s sor√°n:", error.response?.data || error.message);
          res.status(500).send("‚ùå Hiba a felt√∂lt√©s sor√°n");
      }
  });
};

// Tan√∫s√≠tv√°nyok lek√©rdez√©si endpoint
exports.getCertificates = async (req, res) => {
  try {
    const certificates = await Certificate.find();
    res.json(certificates);
  } catch (error) {
    console.error('Hiba a lek√©rdez√©s sor√°n:', error);
    res.status(500).send('Hiba a lek√©rdez√©s sor√°n');
  }
};

exports.getCertificateByCertNo = async (req, res) => {
    try {
      const rawCertNo = req.params.certNo;
  
      const certParts = rawCertNo
        .split(/[/,]/) // Splitel√©s '/' vagy ',' ment√©n
        .map(part => part.trim()) // Sz√≥k√∂z√∂k elt√°vol√≠t√°sa
        .filter(part => part.length > 0);
  
      console.log('Keresett Certificate r√©szek:', certParts);
  
      const regexConditions = certParts.map(part => {
        const normalizedPart = part.replace(/\s+/g, '').toLowerCase();
        console.log('Regex keres√©s r√©szletre:', normalizedPart);
        return { certNo: { $regex: new RegExp(normalizedPart.split('').join('.*'), 'i') } };
      });
  
      console.log('Keres√©si felt√©telek:', regexConditions);
  
      const certificate = await Certificate.findOne({
        $or: regexConditions
      });
  
      if (!certificate) {
        console.log('Certificate not found');
        return res.status(404).json({ message: 'Certificate not found' });
      }
  
      console.log('Certificate found:', certificate);
      res.json(certificate);
    } catch (error) {
      console.error('Error fetching certificate:', error);
      res.status(500).send('Error fetching certificate');
    }
  };