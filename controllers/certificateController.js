const fs = require('fs');
const path = require('path');
const Certificate = require('../models/certificate');
const CompanyCertificateLink = require('../models/companyCertificateLink');
const User = require('../models/user'); // üîπ Import√°ljuk a User modellt
const multer = require('multer');
const { generateDocxFile } = require('../helpers/docx'); // üîπ DOCX gener√°l√°s import√°l√°sa
const azureBlobService = require('../services/azureBlobService');
const { uploadPdfWithFormRecognizerInternal } = require('../helpers/ocrHelper');
const { extractCertFieldsFromOCR } = require('../helpers/openaiCertExtractor');

const upload = multer({ dest: 'uploads/' });
const today = new Date();

// --- Helper: standardized duplicate (unique index) error response ---
function sendDuplicateError(res, err) {
  // MongoServerError E11000 handler
  const isDup =
    err?.code === 11000 ||
    err?.name === 'MongoServerError' && /E11000/i.test(err?.message || '');
  if (!isDup) return false;

  // Try to extract key/values if available
  const keyValue = err.keyValue || {};
  const details = {
    company: keyValue.company,
    certNo: keyValue.certNo,
    issueDate: keyValue.issueDate
  };

  // Prefer 409 Conflict for duplicates
  res.status(409).json({
    error: 'DUPLICATE_CERTIFICATE',
    message: 'M√°r l√©tezik tan√∫s√≠tv√°ny ezzel a (company, certNo, issueDate) kombin√°ci√≥val.',
    details
  });
  return true;
}

// F√°jl felt√∂lt√©si endpoint
exports.uploadCertificate = async (req, res) => {
  upload.single('file')(req, res, async (err) => {
    if (err) return res.status(500).send('‚ùå F√°jl felt√∂lt√©si hiba.');

    // Guard: check if file was provided
    if (!req.file) {
      return res.status(400).json({ message: '‚ùå Hi√°nyz√≥ f√°jl a k√©r√©sben.' });
    }

    try {
      const {
        userId,
        certNo,
        scheme,
        status,
        issueDate,
        applicant,
        protection,
        equipment,
        manufacturer,
        exmarking,
        xcondition,
        specCondition,
        description,
        ucondition,
        recognizedText
      } = req.body;

      if (!userId || !certNo) {
        return res.status(400).json({ message: '‚ùå User ID √©s certNo k√∂telez≈ë!' });
      }

      const user = await User.findById(userId);
      if (!user || !user.company) {
        return res.status(400).json({ message: '‚ùå √ârv√©nytelen user vagy hi√°nyz√≥ company!' });
      }

      // --- REPLACE PDF/DOCX GENERATION & AZURE UPLOAD BLOCK ---
      const pdfPath = path.resolve(req.file.path);
      const originalPdfName = req.file.originalname;

      // Sanitize folder/file parts derived from certNo to avoid illegal blob names
      const safeCert = String(certNo).replace(/[^\w\-.]+/g, '_');
      const pdfFileName = originalPdfName || `${safeCert}.pdf`;

      // DOCX gener√°l√°s (a megl√©v≈ë helperrel ‚Äì explicit c√©l √∫tvonallal)
      const extractedText = recognizedText || 'Nincs OCR sz√∂veg';
      const docxFileName = `${safeCert}_extracted.docx`;
      const docxTempPath = path.join('uploads', docxFileName);
      try {
        // generateDocxFile(recognizedText, originalFileName, scheme, outputPath)
        await generateDocxFile(extractedText, safeCert, scheme || 'ATEX', docxTempPath);
      } catch (e) {
        console.warn('‚ö†Ô∏è DOCX gener√°l√°s sikertelen, √ºres DOCX l√©trehoz√°sa helyett kihagyjuk:', e.message);
      }

      // ===== Azure Blob Storage felt√∂lt√©s =====
      const blobFolder = `certificates/${safeCert}`;

      let uploadedPdfPath = null;
      let uploadedDocxPath = null;

      try {
        await azureBlobService.uploadFile(pdfPath, `${blobFolder}/${pdfFileName}`);
        uploadedPdfPath = `${blobFolder}/${pdfFileName}`;
      } catch (e) {
        console.warn('‚ö†Ô∏è Blob PDF upload failed:', e.message);
      }

      try {
        if (fs.existsSync(docxTempPath)) {
          await azureBlobService.uploadFile(docxTempPath, `${blobFolder}/${docxFileName}`);
          uploadedDocxPath = `${blobFolder}/${docxFileName}`;
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è Blob DOCX upload failed:', e.message);
      }
      // --- END REPLACEMENT BLOCK ---

      // ===== Ment√©s MongoDB-be =====
      const certificate = new Certificate({
        certNo,
        scheme,
        status,
        issueDate,
        applicant,
        protection,
        equipment,
        manufacturer,
        exmarking,
        xcondition: xcondition === 'true' || xcondition === true,
        specCondition: specCondition || null,
        description,
        ucondition: ucondition === 'true' || ucondition === true,
        fileName: originalPdfName,
        fileUrl: uploadedPdfPath,
        docxUrl: uploadedDocxPath,
        createdBy: userId,
        company: user.company,
        isDraft: false
      });

      try {
        await certificate.save();
      } catch (e) {
        // If duplicate, return a clean 409 that the frontend can display
        if (sendDuplicateError(res, e)) {
          // Optional: try to clean uploaded blobs when DB save fails with duplicate
          try { if (uploadedPdfPath && typeof azureBlobService.deleteFile === 'function') await azureBlobService.deleteFile(uploadedPdfPath); } catch {}
          try { if (uploadedDocxPath && typeof azureBlobService.deleteFile === 'function') await azureBlobService.deleteFile(uploadedDocxPath); } catch {}
          // Also cleanup local temp files
          try { if (fs.existsSync(pdfPath)) fs.unlinkSync(pdfPath); } catch {}
          try { if (fs.existsSync(docxTempPath)) fs.unlinkSync(docxTempPath); } catch {}
          return;
        }
        throw e;
      }

      // Helyi ideiglenes f√°jlok t√∂rl√©se
      try { if (fs.existsSync(pdfPath)) fs.unlinkSync(pdfPath); } catch {}
      try { if (fs.existsSync(docxTempPath)) fs.unlinkSync(docxTempPath); } catch {}

      return res.json({
        message: '‚úÖ Felt√∂lt√©s sikeres! (Azure Blob)',
        blob: { pdfPath: uploadedPdfPath, docxPath: uploadedDocxPath },
        data: certificate
      });
    } catch (error) {
      // If duplicate error, send standardized 409
      if (sendDuplicateError(res, error)) return;
      console.error('‚ùå Hiba a felt√∂lt√©s sor√°n:', error.response?.data || error.message);
      return res.status(500).send('‚ùå Hiba a felt√∂lt√©s sor√°n');
    }
  });
};


 // Tan√∫s√≠tv√°nyok lek√©rdez√©se ‚Äì SAJ√ÅT c√©g + adopt√°lt GLOBAL-ok
 exports.getCertificates = async (req, res) => {
   try {
     const company = req.user.company;
     if (!company) {
       return res.status(400).json({ message: "‚ùå Hi√°nyz√≥ company adat a felhaszn√°l√≥ tokenj√©ben!" });
     }

   console.log(`üîç Saj√°t (${company}) + adopt√°lt GLOBAL lek√©r√©s`);

    const own = await Certificate.find({ company });

    const links = await CompanyCertificateLink.find({ company })
      .select('certId')
      .lean();
    const adoptedIds = links.map(l => l.certId);

    const adoptedGlobals = adoptedIds.length
      ? await Certificate.find({ _id: { $in: adoptedIds }, company: 'global' })
      : [];

    // √∂sszevon√°s (glob√°lisak nem √ºtk√∂znek saj√°t c√©gbeliekkel)
    const merged = [...own, ...adoptedGlobals];
    res.json(merged);
   } catch (error) {
     console.error('‚ùå Hiba a lek√©rdez√©s sor√°n:', error);
     res.status(500).send('‚ùå Hiba a lek√©rdez√©s sor√°n');
   }
 };

// Tan√∫s√≠tv√°nyok lek√©rdez√©se ‚Äì CSAK GLOBAL, adoptedByMe jelz√©ssel
 exports.getGlobalCertificates = async (req, res) => {
   try {
    const company = req.user?.company;
    console.log('üîç Keres√©s GLOBAL tan√∫s√≠tv√°nyokra (adoptedByMe flaggel)');
    const certificates = await Certificate.aggregate([
      { $match: { company: 'global' } },
      {
        $lookup: {
          from: 'companycertificatelinks', // <-- a modell pluraliz√°lt neve
          let: { certId: '$_id' },
          pipeline: [
            { $match: { $expr: { $and: [
              { $eq: ['$certId', '$$certId'] },
              { $eq: ['$company', company] }
            ]}}},
            { $limit: 1 }
          ],
          as: 'myLink'
        }
      },
      { $addFields: { adoptedByMe: { $gt: [{ $size: '$myLink' }, 0] } } },
      { $project: { myLink: 0 } }
    ]);
    res.json(certificates);
   } catch (error) {
     console.error('‚ùå Hiba a global lek√©rdez√©s sor√°n:', error);
     res.status(500).send('‚ùå Hiba a global lek√©rdez√©s sor√°n');
   }
 };

exports.getCertificateByCertNo = async (req, res) => {
    try {
      const rawCertNo = req.params.certNo;
  
      const certParts = rawCertNo
        .split(/[/,]/) // Splitel√©s '/' vagy ',' ment√©n
        .map(part => part.trim()) // Sz√≥k√∂z√∂k elt√°vol√≠t√°sa
        .filter(part => part.length > 0);
  
      console.log('Keresett Certificate r√©szek:', certParts);
  
      const regexConditions = certParts.map(part => {
        const normalizedPart = part.replace(/\s+/g, '').toLowerCase();
        console.log('Regex keres√©s r√©szletre:', normalizedPart);
        return { certNo: { $regex: new RegExp(normalizedPart.split('').join('.*'), 'i') } };
      });
  
      console.log('Keres√©si felt√©telek:', regexConditions);
  
      const certificate = await Certificate.findOne({
        $or: regexConditions
      });
  
      if (!certificate) {
        console.log('Certificate not found');
        return res.status(404).json({ message: 'Certificate not found' });
      }
  
      console.log('Certificate found:', certificate);
      res.json(certificate);
    } catch (error) {
      console.error('Error fetching certificate:', error);
      res.status(500).send('Error fetching certificate');
    }
  };


exports.deleteCertificate = async (req, res) => {
  try {
    const { id } = req.params;

    const certificate = await Certificate.findById(id);
    if (!certificate) {
      return res.status(404).json({ message: '‚ùå Certificate not found' });
    }

    // Blob *paths* (container-relative) are used below for deleteFile per our azureBlobService
    try {
      if (certificate.fileUrl && typeof azureBlobService.deleteFile === 'function') {
        await azureBlobService.deleteFile(certificate.fileUrl);
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è Blob PDF delete failed:', e.message);
    }

    // Blob *paths* (container-relative) are used below for deleteFile per our azureBlobService
    try {
      if (certificate.docxUrl && typeof azureBlobService.deleteFile === 'function') {
        await azureBlobService.deleteFile(certificate.docxUrl);
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è Blob DOCX delete failed:', e.message);
    }

    await Certificate.findByIdAndDelete(id);
    // t√∂r√∂lj√ºk a kapcsol√≥ rekordokat is
   try {
     await CompanyCertificateLink.deleteMany({ certId: id });
   } catch (e) {
     console.warn('‚ö†Ô∏è Linkek t√∂rl√©se sikertelen lehetett:', e?.message);
   }
    return res.json({ message: '‚úÖ Certificate deleted successfully (Azure Blob + DB).' });
  } catch (error) {
    console.error('‚ùå Error deleting certificate:', error);
    return res.status(500).send('‚ùå Error deleting certificate');
  }
};

// Tan√∫s√≠tv√°ny m√≥dos√≠t√°sa ID alapj√°n
exports.updateCertificate = async (req, res) => {
  try {
    const { id } = req.params;
    const { certNo, scheme, status, issueDate, applicant, protection, equipment, manufacturer, exmarking, xcondition, ucondition, specCondition, description } = req.body;

    const certificate = await Certificate.findById(id);
    if (!certificate) {
      return res.status(404).json({ message: '‚ùå Certificate not found' });
    }

    certificate.certNo = certNo ?? certificate.certNo;
    certificate.scheme = scheme ?? certificate.scheme;
    certificate.status = status ?? certificate.status;
    certificate.issueDate = issueDate ?? certificate.issueDate;
    certificate.applicant = applicant ?? certificate.applicant;
    certificate.protection = protection ?? certificate.protection;
    certificate.equipment = equipment ?? certificate.equipment;
    certificate.manufacturer = manufacturer ?? certificate.manufacturer;
    certificate.exmarking = exmarking ?? certificate.exmarking;
    certificate.xcondition = (typeof xcondition === 'boolean') ? xcondition : (xcondition === 'true' || xcondition === '1') || certificate.xcondition;
    certificate.ucondition = (typeof ucondition === 'boolean') ? ucondition : (ucondition === 'true' || ucondition === '1') || certificate.ucondition;
    certificate.specCondition = specCondition ?? certificate.specCondition;
    certificate.description = description ?? certificate.description;

    try {
      await certificate.save();
    } catch (e) {
      if (sendDuplicateError(res, e)) return;
      throw e;
    }

    return res.json({ message: '‚úÖ Certificate updated successfully', data: certificate });
  } catch (error) {
    if (sendDuplicateError(res, error)) return;
    console.error('‚ùå Error updating certificate:', error);
    return res.status(500).send('‚ùå Error updating certificate');
  }
};

// Tan√∫s√≠tv√°nyok company mez≈ëj√©nek friss√≠t√©se -> 'global'
// + azonnali adopt link l√©trehoz√°sa az EREDETI c√©ghez (hogy ott is megmaradjon)
// Megjegyz√©s: Ez a v√°ltozat nem haszn√°l Mongo tranzakci√≥t, √≠gy standalone mongod alatt is m≈±k√∂dik.
exports.updateCompanyToGlobal = async (req, res) => {
  const { ids } = req.body;
  if (!ids || !Array.isArray(ids) || ids.length === 0) {
    return res.status(400).json({ message: "‚ùå No certificate IDs provided!" });
  }

  try {
    // 1) El≈ëre kiolvassuk az √©rintett cert-ek *eredeti* company √©rt√©k√©t
    const certs = await Certificate.find({ _id: { $in: ids } })
      .select('_id company')
      .lean();

    if (!certs.length) {
      return res.json({ message: '‚ÑπÔ∏è No certificates found for given IDs.', updatedCount: 0 });
    }

    // Csak azok, amelyek m√©g nem global-ok
    const toUpdate = certs.filter(c => (c.company || '').toLowerCase() !== 'global');
    if (!toUpdate.length) {
      return res.json({ message: "‚ÑπÔ∏è All selected certificates are already 'global'.", updatedCount: 0 });
    }

    // 2) El≈ësz√∂r hozzuk l√©tre (upsert) a linkeket az EREDETI company-khoz.
    //    Ez idempotens √©s biztons√°gos: ha az update k√©s≈ëbb hib√°zna, a link legfeljebb felesleges, de k√°rt nem okoz.
    const linkOps = toUpdate.map(c => ({
      updateOne: {
        filter: { company: c.company, certId: c._id },
        update: {
          $setOnInsert: {
            company: c.company,
            certId: c._id,
            addedAt: new Date()
          }
        },
        upsert: true
      }
    }));

    if (linkOps.length) {
      await CompanyCertificateLink.bulkWrite(linkOps);
    }

    // 3) Majd √°t√°ll√≠tjuk a cert-ek company mez≈ëj√©t 'global'-ra.
    const updateRes = await Certificate.updateMany(
      { _id: { $in: toUpdate.map(c => c._id) } },
      { $set: { company: 'global' } }
    );

    return res.json({
      message: "‚úÖ Moved to 'global' and linked back to original companies (no transaction).",
      updatedCount: updateRes?.modifiedCount ?? toUpdate.length
    });
  } catch (error) {
    console.error("‚ùå Error updating company to global (no-tx):", error);
    return res.status(500).json({ message: "‚ùå Error updating company to global", details: error?.message });
  }
};

// ATEX el≈ën√©zet OCR+AI feldolgoz√°ssal (nem ment DB-be, csak visszaadja az eredm√©nyt)
exports.previewAtex = async (req, res) => {
  upload.single('file')(req, res, async (err) => {
    if (err) return res.status(500).send('‚ùå F√°jl felt√∂lt√©si hiba.');
    if (!req.file) {
      return res.status(400).json({ message: '‚ùå Hi√°nyz√≥ f√°jl a k√©r√©sben.' });
    }

    try {
      const pdfPath = path.resolve(req.file.path);
      const originalPdfName = req.file.originalname;

      // --- Real OCR + AI extract (same stack as bulk) ---
      const pdfBuffer = fs.readFileSync(pdfPath);

      // 1) Azure OCR
      console.info(JSON.stringify({ level: 'info', message: 'üöÄ [ATEX preview] Sending PDF to Azure OCR...', name: originalPdfName }));
      const { recognizedText } = await uploadPdfWithFormRecognizerInternal(pdfBuffer);
      console.info(JSON.stringify({ level: 'info', message: '‚úÖ [ATEX preview] Azure OCR done.' }));

      // 2) OpenAI field extraction (ATEX profile inside the helper)
      console.info(JSON.stringify({ level: 'info', message: 'üß† [ATEX preview] Extracting fields with OpenAI...' }));
      const aiData = await extractCertFieldsFromOCR(recognizedText || '');
      console.info(JSON.stringify({ level: 'info', message: '‚úÖ [ATEX preview] Field extraction done.', extracted: aiData }));

      // 3) Normalize keys for the frontend (expects lower-case keys like in IECEx path)
      const certStr = (aiData?.certNo || aiData?.certificateNumber || '').toString().trim().toUpperCase();
      const extracted = {
        certNo: aiData?.certNo || aiData?.certificateNumber || '',
        status: aiData?.status || '',
        issueDate: aiData?.issueDate || '',
        applicant: aiData?.applicant || '',
        manufacturer: aiData?.manufacturer || '',
        equipment: aiData?.equipment || '',
        exmarking: aiData?.exmarking || aiData?.exMarking || '',
        protection: aiData?.protection || '',
        specCondition: aiData?.specCondition || aiData?.specialConditions || '',
        description: aiData?.description || '',
        xcondition: certStr ? (certStr.endsWith('X') || /\bX\b/.test(certStr)) : false,
        ucondition: certStr ? (certStr.endsWith('U') || /\bU\b/.test(certStr)) : false
      };

      // Cleanup temp
      try { if (fs.existsSync(pdfPath)) fs.unlinkSync(pdfPath); } catch {}

      return res.json({
        message: '‚úÖ ATEX preview k√©sz',
        recognizedText: recognizedText || '',
        extracted
      });
    } catch (error) {
      console.error('‚ùå Hiba ATEX preview sor√°n:', error?.response?.data || error?.message || error);
      // Cleanup temp
      try { if (req?.file?.path && fs.existsSync(req.file.path)) fs.unlinkSync(req.file.path); } catch {}
      return res.status(500).send('‚ùå Hiba ATEX preview sor√°n');
    }
  });
};

// Global certificate adopt√°l√°sa a c√©g saj√°t list√°j√°ba (link l√©trehoz√°sa)
exports.adoptGlobal = async (req, res) => {
  try {
    const company = req.user?.company;
    const userId = req.user?._id;
    const { id } = req.params; // certificate _id

    if (!company) return res.status(400).json({ message: '‚ùå Hi√°nyz√≥ company az auth tokenb≈ël' });

    const cert = await Certificate.findById(id);
    if (!cert) return res.status(404).json({ message: '‚ùå Certificate not found' });
    if (cert.company !== 'global') {
      return res.status(400).json({ message: '‚ùå Csak global certificate adopt√°lhat√≥' });
    }

    await CompanyCertificateLink.updateOne(
      { company, certId: cert._id },
      { $setOnInsert: { company, certId: cert._id, addedBy: userId, addedAt: new Date() } },
      { upsert: true }
    );

    return res.json({ message: '‚úÖ Adopt√°lva a c√©g list√°j√°ba' });
  } catch (error) {
    if (error?.code === 11000) {
      // unique index miatt idempotens ‚Äì m√°r l√©tezik a link
      return res.json({ message: '‚ÑπÔ∏è M√°r adopt√°lva volt' });
    }
    console.error('‚ùå Adopt hiba:', error);
    return res.status(500).json({ message: '‚ùå Adopt hiba' });
  }
};

// Global certificate unadopt (link t√∂rl√©se a c√©g list√°j√°b√≥l)
exports.unadoptGlobal = async (req, res) => {
  try {
    const company = req.user?.company;
    const { id } = req.params; // certificate _id

    if (!company) return res.status(400).json({ message: '‚ùå Hi√°nyz√≥ company az auth tokenb≈ël' });

    const cert = await Certificate.findById(id);
    if (!cert) return res.status(404).json({ message: '‚ùå Certificate not found' });
    if (cert.company !== 'global') {
      return res.status(400).json({ message: '‚ùå Csak global certificate-r≈ël vehet≈ë le az adopt' });
    }

    await CompanyCertificateLink.deleteOne({ company, certId: cert._id });
    return res.json({ message: '‚úÖ Elt√°vol√≠tva a c√©g list√°j√°r√≥l' });
  } catch (error) {
    console.error('‚ùå Unadopt hiba:', error);
    return res.status(500).json({ message: '‚ùå Unadopt hiba' });
  }
};