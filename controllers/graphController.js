const axios = require('axios');
const multer = require('multer');
const fs = require('fs');

const upload = multer({ dest: 'uploads/' }); // Ideiglenes f√°jlok ment√©se

/**
 * üìÇ √Åltal√°nos mappa l√©trehoz√°sa vagy keres√©se az ExAI mapp√°n bel√ºl
 */
exports.getOrCreateFolder = async function (accessToken, folderPath) {
    try {
        console.log(`üîç Checking or creating OneDrive folder: ${folderPath}`);

        const folders = folderPath.split("/");
        let parentFolderId = "root"; 
        let folderUrl = null;

        for (const folder of folders) {
            let folderExists = null;

            try {
                // üìÇ Check if the folder exists in the parent folder
                const checkResponse = await axios.get(
                    `https://graph.microsoft.com/v1.0/me/drive/${parentFolderId === "root" ? "root" : `items/${parentFolderId}`}/children`,
                    { headers: { Authorization: `Bearer ${accessToken}` } }
                );

                folderExists = checkResponse.data.value.find(f => f.name === folder);
                if (folderExists) {
                    parentFolderId = folderExists.id;
                    folderUrl = folderExists.webUrl; // üîπ Get the OneDrive folder URL
                    console.log(`‚úÖ Folder exists: ${folder} (ID: ${parentFolderId}, URL: ${folderUrl})`);
                    continue;
                }
            } catch (error) {
                console.error(`‚ùå Error checking folder: ${error.response?.data || error.message}`);
                return null;
            }

            // üìÇ If the folder does not exist, create it
            console.log(`üìÅ Creating folder: ${folder} under parent ID: ${parentFolderId}`);
            try {
                const createResponse = await axios.post(
                    `https://graph.microsoft.com/v1.0/me/drive/${parentFolderId === "root" ? "root" : `items/${parentFolderId}`}/children`,
                    { name: folder, folder: {}, "@microsoft.graph.conflictBehavior": "rename" },
                    { headers: { Authorization: `Bearer ${accessToken}`, "Content-Type": "application/json" } }
                );

                parentFolderId = createResponse.data.id;
                folderUrl = createResponse.data.webUrl; // üîπ Get OneDrive folder URL
                console.log(`‚úÖ Folder created: ${folder} (ID: ${parentFolderId}, URL: ${folderUrl})`);
            } catch (error) {
                console.error(`‚ùå Error creating folder: ${error.response?.data || error.message}`);
                return null;
            }
        }

        return { folderId: parentFolderId, folderUrl }; // üîπ Return both folderId and folderUrl
    } catch (error) {
        console.error(`‚ùå Unexpected error in folder creation: ${error.response?.data || error.message}`);
        return null;
    }
};

exports.createOneDriveFolder = async (req, res) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    const { folderPath } = req.body;  // üìÇ M√°r teljes √∫tvonalat v√°runk pl. "ExAI/Certificates"

    if (!accessToken || !folderPath) {
        return res.status(400).json({ error: "‚ùå Access token and folderPath are required" });
    }

    try {
        // üìÇ Mappa ellen≈ërz√©se/l√©trehoz√°sa
        const folderId = await getOrCreateFolder(accessToken, folderPath);

        if (!folderId) {
            return res.status(500).json({ error: "‚ùå Failed to create folder" });
        }

        console.log(`‚úÖ Mappa l√©trehozva vagy m√°r l√©tezik: ${folderPath} (ID: ${folderId})`);
        res.json({ message: "‚úÖ Folder created or already exists", folderId });
    } catch (error) {
        console.error("‚ùå Mappa l√©trehoz√°si hiba:", error.response?.data || error.message);
        res.status(500).json({ error: "Failed to create folder" });
    }
};

/**
 * üìÇ OneDrive f√°jlok list√°z√°sa az ExAI mapp√°ban
 */
exports.getOneDriveFiles = async (req, res) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    if (!accessToken) {
        return res.status(401).json({ error: "‚ùå Access token is required" });
    }

    try {
        const exAIFolderId = await getOrCreateExAIFolder(accessToken);

        const result = await axios.get(
            `https://graph.microsoft.com/v1.0/me/drive/items/${exAIFolderId}/children`,
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        console.log("‚úÖ ExAI mappa f√°jljai:", result.data);
        res.json(result.data);
    } catch (error) {
        console.error("‚ùå Hiba a f√°jlok lek√©r√©sekor:", error);
        res.status(500).json({ error: "Failed to fetch files" });
    }
};

/**
 * üìÑ F√°jl felt√∂lt√©se az ExAI mapp√°ba
 */
exports.uploadOneDriveFile = async (req, res) => {
    upload.single("file")(req, res, async (err) => {
        if (err) return res.status(500).send("‚ùå F√°jl felt√∂lt√©si hiba.");

        const accessToken = req.headers.authorization?.split(" ")[1];
        const filePath = req.file.path;
        const fileName = req.file.originalname;
        const folderPath = req.body.folderPath; // üìÇ Teljes el√©r√©si √∫tvonal pl. "ExAI/Certificates"

        if (!accessToken || !folderPath) {
            return res.status(400).json({ error: "‚ùå Access token √©s mappa n√©v megad√°sa k√∂telez≈ë." });
        }

        try {
            // üìÇ Mappa ellen≈ërz√©se/l√©trehoz√°sa
            const targetFolderId = await getOrCreateFolder(accessToken, folderPath);

            if (!targetFolderId) {
                return res.status(500).json({ error: "‚ùå Failed to create folder" });
            }

            // üìÑ F√°jl beolvas√°sa √©s felt√∂lt√©se a c√©lmapp√°ba
            const fileData = fs.readFileSync(filePath);
            const uploadResponse = await axios.put(
                `https://graph.microsoft.com/v1.0/me/drive/items/${targetFolderId}:/${fileName}:/content`,
                fileData,
                {
                    headers: { Authorization: `Bearer ${accessToken}`, "Content-Type": "application/octet-stream" },
                }
            );

            fs.unlinkSync(filePath); // üìÑ Helyi f√°jl t√∂rl√©se
            console.log(`‚úÖ F√°jl felt√∂ltve a ${folderPath} mapp√°ba:`, uploadResponse.data);
            res.json(uploadResponse.data);
        } catch (error) {
            console.error("‚ùå F√°jl felt√∂lt√©si hiba:", error.response?.data || error.message);
            res.status(500).json({ error: "Failed to upload file" });
        }
    });
};

/**
 * üóëÔ∏è F√°jl vagy mappa t√∂rl√©se az ExAI mapp√°b√≥l
 */
exports.deleteOneDriveItem = async (req, res) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    const itemId = req.params.itemId;

    if (!accessToken || !itemId) {
        return res.status(400).json({ error: "‚ùå Access token and itemId are required" });
    }

    try {
        await axios.delete(`https://graph.microsoft.com/v1.0/me/drive/items/${itemId}`, {
            headers: { Authorization: `Bearer ${accessToken}` },
        });

        console.log("‚úÖ F√°jl/Mappa t√∂r√∂lve:", itemId);
        res.json({ message: "Deleted successfully" });
    } catch (error) {
        console.error("‚ùå T√∂rl√©si hiba:", error.response?.data || error.message);
        res.status(500).json({ error: "Failed to delete item" });
    }
};

/**
 * ‚úèÔ∏è F√°jl vagy mappa √°tnevez√©se az ExAI mapp√°ban
 */
exports.renameOneDriveItem = async (req, res) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    const itemId = req.params.itemId;
    const { newName } = req.body;

    if (!accessToken || !itemId || !newName) {
        return res.status(400).json({ error: "‚ùå Access token, itemId, and newName are required" });
    }

    try {
        const graphResponse = await axios.patch(
            `https://graph.microsoft.com/v1.0/me/drive/items/${itemId}`,
            { name: newName },
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        console.log("‚úÖ F√°jl/Mappa √°tnevezve:", graphResponse.data);
        res.json(graphResponse.data);
    } catch (error) {
        console.error("‚ùå √Åtnevez√©si hiba:", error.response?.data || error.message);
        res.status(500).json({ error: "Failed to rename item" });
    }
};