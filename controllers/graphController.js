const axios = require('axios');
const multer = require('multer');
const fs = require('fs');

const upload = multer({ dest: 'uploads/' }); // Ideiglenes f√°jlok ment√©se

/**
 * üìÇ √Åltal√°nos mappa l√©trehoz√°sa vagy keres√©se az ExAI mapp√°n bel√ºl
 */
exports.getOrCreateFolder = async function (accessToken, folderName) {
    try {
        // üìÇ ExAI mappa azonos√≠t√≥j√°nak lek√©r√©se vagy l√©trehoz√°sa
        const exAIFolderId = await getOrCreateExAIFolder(accessToken);

        // üìÇ √ñsszes almappa lek√©rdez√©se az ExAI mapp√°n bel√ºl
        const response = await axios.get(
            `https://graph.microsoft.com/v1.0/me/drive/items/${exAIFolderId}/children`,
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        // üìÇ Keres√©s a l√©tez≈ë mapp√°k k√∂z√∂tt
        const existingFolder = response.data.value.find(folder => folder.name.toLowerCase() === folderName.toLowerCase());
        if (existingFolder) {
            console.log(`‚úÖ ${folderName} mappa m√°r l√©tezik, ID: ${existingFolder.id}`);
            return existingFolder.id; // üìÇ Ha l√©tezik, visszaadjuk az ID-j√°t
        }

        // üìÇ Ha nem l√©tezik, akkor l√©trehozzuk
        const createResponse = await axios.post(
            `https://graph.microsoft.com/v1.0/me/drive/items/${exAIFolderId}/children`,
            { name: folderName, folder: {}, "@microsoft.graph.conflictBehavior": "fail" },
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        console.log(`‚úÖ ${folderName} mappa l√©trehozva, ID: ${createResponse.data.id}`);
        return createResponse.data.id;
    } catch (error) {
        console.error(`‚ùå ${folderName} mappa ellen≈ërz√©si/l√©trehoz√°si hiba:`, error.response?.data || error.message);
        throw error;
    }
};

async function getOrCreateExAIFolder(accessToken) {
    try {
        // üìÇ Megkeress√ºk, hogy l√©tezik-e az ExAI mappa
        const response = await axios.get(
            "https://graph.microsoft.com/v1.0/me/drive/root/children?$filter=name eq 'ExAI'",
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        if (response.data.value.length > 0) {
            console.log("‚úÖ ExAI mappa m√°r l√©tezik:", response.data.value[0].id);
            return response.data.value[0].id; // Ha l√©tezik, visszaadjuk az ID-j√°t
        }

        // üìÇ Ha nem l√©tezik, l√©trehozzuk
        const createResponse = await axios.post(
            "https://graph.microsoft.com/v1.0/me/drive/root/children",
            { name: "ExAI", folder: {}, "@microsoft.graph.conflictBehavior": "rename" },
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        console.log("‚úÖ ExAI mappa l√©trehozva:", createResponse.data.id);
        return createResponse.data.id;
    } catch (error) {
        console.error("‚ùå ExAI mappa ellen≈ërz√©si/l√©trehoz√°si hiba:", error.response?.data || error.message);
        throw error;
    }
}

exports.createOneDriveFolder = async (req, res) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    const { folderName } = req.body;

    if (!accessToken || !folderName) {
        return res.status(400).json({ error: "‚ùå Access token and folderName are required" });
    }

    try {
        // üìÇ ExAI mappa azonos√≠t√≥j√°nak lek√©r√©se vagy l√©trehoz√°sa
        const exAIFolderId = await getOrCreateExAIFolder(accessToken);

        // üìÇ √öj mappa l√©trehoz√°sa az ExAI mapp√°n bel√ºl
        const response = await axios.post(
            `https://graph.microsoft.com/v1.0/me/drive/items/${exAIFolderId}/children`,
            { 
                name: folderName, 
                folder: {}, 
                "@microsoft.graph.conflictBehavior": "rename" 
            },
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        console.log("‚úÖ Almappa l√©trehozva az ExAI mapp√°n bel√ºl:", response.data);
        res.json(response.data);
    } catch (error) {
        console.error("‚ùå Almappa l√©trehoz√°si hiba:", error.response?.data || error.message);
        res.status(500).json({ error: "Failed to create subfolder" });
    }
};

/**
 * üìÇ OneDrive f√°jlok list√°z√°sa az ExAI mapp√°ban
 */
exports.getOneDriveFiles = async (req, res) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    if (!accessToken) {
        return res.status(401).json({ error: "‚ùå Access token is required" });
    }

    try {
        const exAIFolderId = await getOrCreateExAIFolder(accessToken);

        const result = await axios.get(
            `https://graph.microsoft.com/v1.0/me/drive/items/${exAIFolderId}/children`,
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        console.log("‚úÖ ExAI mappa f√°jljai:", result.data);
        res.json(result.data);
    } catch (error) {
        console.error("‚ùå Hiba a f√°jlok lek√©r√©sekor:", error);
        res.status(500).json({ error: "Failed to fetch files" });
    }
};

/**
 * üìÑ F√°jl felt√∂lt√©se az ExAI mapp√°ba
 */
exports.uploadOneDriveFile = async (req, res) => {
    upload.single("file")(req, res, async (err) => {
        if (err) return res.status(500).send("‚ùå F√°jl felt√∂lt√©si hiba.");

        const accessToken = req.headers.authorization?.split(" ")[1];
        const filePath = req.file.path;
        const fileName = req.file.originalname;
        const folderName = req.body.folderName; // üìÇ A frontendr≈ël kapott c√©lmappa neve

        if (!accessToken || !folderName) {
            return res.status(400).json({ error: "‚ùå Access token √©s mappa n√©v megad√°sa k√∂telez≈ë." });
        }

        try {
            // üìÇ Biztos√≠tjuk, hogy az ExAI f≈ëmappa l√©tezik
            const exAIFolderId = await getOrCreateExAIFolder(accessToken);

            // üìÇ Biztos√≠tjuk, hogy a frontend √°ltal k√ºld√∂tt mappa l√©tezik az ExAI mapp√°n bel√ºl
            const targetFolderId = await getOrCreateFolder(accessToken, folderName);

            // üìÑ F√°jl beolvas√°sa √©s felt√∂lt√©se a c√©lmapp√°ba
            const fileData = fs.readFileSync(filePath);
            const uploadResponse = await axios.put(
                `https://graph.microsoft.com/v1.0/me/drive/items/${targetFolderId}:/${fileName}:/content`,
                fileData,
                {
                    headers: { Authorization: `Bearer ${accessToken}`, "Content-Type": "application/octet-stream" },
                }
            );

            fs.unlinkSync(filePath); // üìÑ Helyi f√°jl t√∂rl√©se
            console.log(`‚úÖ F√°jl felt√∂ltve a ${folderName} mapp√°ba:`, uploadResponse.data);
            res.json(uploadResponse.data);
        } catch (error) {
            console.error("‚ùå F√°jl felt√∂lt√©si hiba:", error.response?.data || error.message);
            res.status(500).json({ error: "Failed to upload file" });
        }
    });
};

/**
 * üóëÔ∏è F√°jl vagy mappa t√∂rl√©se az ExAI mapp√°b√≥l
 */
exports.deleteOneDriveItem = async (req, res) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    const itemId = req.params.itemId;

    if (!accessToken || !itemId) {
        return res.status(400).json({ error: "‚ùå Access token and itemId are required" });
    }

    try {
        await axios.delete(`https://graph.microsoft.com/v1.0/me/drive/items/${itemId}`, {
            headers: { Authorization: `Bearer ${accessToken}` },
        });

        console.log("‚úÖ F√°jl/Mappa t√∂r√∂lve:", itemId);
        res.json({ message: "Deleted successfully" });
    } catch (error) {
        console.error("‚ùå T√∂rl√©si hiba:", error.response?.data || error.message);
        res.status(500).json({ error: "Failed to delete item" });
    }
};

/**
 * ‚úèÔ∏è F√°jl vagy mappa √°tnevez√©se az ExAI mapp√°ban
 */
exports.renameOneDriveItem = async (req, res) => {
    const accessToken = req.headers.authorization?.split(" ")[1];
    const itemId = req.params.itemId;
    const { newName } = req.body;

    if (!accessToken || !itemId || !newName) {
        return res.status(400).json({ error: "‚ùå Access token, itemId, and newName are required" });
    }

    try {
        const graphResponse = await axios.patch(
            `https://graph.microsoft.com/v1.0/me/drive/items/${itemId}`,
            { name: newName },
            { headers: { Authorization: `Bearer ${accessToken}` } }
        );

        console.log("‚úÖ F√°jl/Mappa √°tnevezve:", graphResponse.data);
        res.json(graphResponse.data);
    } catch (error) {
        console.error("‚ùå √Åtnevez√©si hiba:", error.response?.data || error.message);
        res.status(500).json({ error: "Failed to rename item" });
    }
};