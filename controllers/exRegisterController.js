const Equipment = require('../models/dataplate'); // Itt haszn√°ljuk a val√≥di model nev√©t
const Zone = require('../models/zone')
const logger = require('../config/logger'); // ha van loggered, vagy kiveheted
const mongoose = require('mongoose');

// L√©trehoz√°s (POST /exreg)
exports.createEquipment = async (req, res) => {
  try {
    const CreatedBy = req.userId; // üîπ Tokenb≈ël kinyerj√ºk a user ID-t
    const Company = req.user.company; // üîπ Tokenb≈ël kinyerj√ºk a company-t

    if (!Company) {
      return res.status(400).json({ message: "Company is missing in token" });
    }

    console.log("Bejelentkezett felhaszn√°l√≥:", { CreatedBy, Company });

    // Ellen≈ërizz√ºk, hogy a k√©r√©s t√∂mb√∂t tartalmaz-e
    const equipmentData = Array.isArray(req.body) ? req.body : [req.body];

    // Minden berendez√©shez hozz√°adjuk a CreatedBy √©s Company mez≈ët
    const equipmentWithUser = equipmentData.map(eq => ({
      ...eq,
      CreatedBy: CreatedBy,
      Company: Company
    }));

    // T√∂meges ment√©s az adatb√°zisba
    const savedEquipments = await Equipment.insertMany(equipmentWithUser);
    
    return res.status(201).json(savedEquipments);
  } catch (error) {
    console.error('Hiba t√∂rt√©nt az eszk√∂z√∂k l√©trehoz√°sakor:', error);
    return res.status(500).json({ error: 'Nem siker√ºlt l√©trehozni az eszk√∂z√∂ket.' });
  }
};

// List√°z√°s (GET /exreg)
exports.listEquipment = async (req, res) => {
  try {
    if (!req.user || !req.user.company) {
      return res.status(401).json({ error: 'Nincs bejelentkezett felhaszn√°l√≥ vagy hi√°nyz√≥ c√©gadatok.' });
    }

    const filter = { Company: req.user.company }; // üîπ Csak az adott v√°llalat eszk√∂zei

    // üîπ Zone alap√∫ sz≈±r√©s
    if (req.query.Zone) {
      filter.Zone = req.query.Zone; // Ha egy adott z√≥n√°hoz tartoz√≥ adatokat k√©r√ºnk
    } else if (req.query.noZone) {
      filter.$or = [{ Zone: null }, { Zone: { $exists: false } }]; // üîπ Ha nincs z√≥na, akkor csak a NULL vagy nem l√©tez≈ë Zone mez≈ëket k√©rj√ºk le
    }

    console.log("Lek√©rdez√©s sz≈±r≈ëje:", filter); // Debug log
    const equipments = await Equipment.find(filter);
    console.log("Lek√©rdezett adatok:", equipments); // Debug log

    return res.json(equipments);
  } catch (error) {
    console.error('Hiba t√∂rt√©nt az eszk√∂z√∂k list√°z√°sakor:', error);
    return res.status(500).json({ error: 'Nem siker√ºlt lek√©rni az eszk√∂z√∂ket.' });
  }
};

// M√≥dos√≠t√°s (PUT /exreg/:id)
exports.updateEquipment = async (req, res) => {
  try {
    const { id } = req.params;
    const ModifiedBy = req.userId;
    const Company = req.user.company;

    if (!ModifiedBy || !Company) {
      console.log("‚ùå HIBA: Bejelentkezett felhaszn√°l√≥ vagy c√©gadat hi√°nyzik.");
      return res.status(401).json({ error: 'Nincs bejelentkezett felhaszn√°l√≥ vagy hi√°nyz√≥ c√©gadatok.' });
    }

    console.log("üîπ M√≥dos√≠t√°si k√≠s√©rlet Equipment ID:", id);
    console.log("üîπ M√≥dos√≠t√≥ felhaszn√°l√≥ (ModifiedBy):", ModifiedBy);
    console.log("üîπ Felhaszn√°l√≥ c√©ge:", Company);

    // **Ellen≈ërizz√ºk, hogy az adott eszk√∂z val√≥ban az adott c√©ghez tartozik**
    const equipment = await Equipment.findOne({ _id: id, Company: Company });

    if (!equipment) {
      console.log("‚ùå Az eszk√∂z nem tal√°lhat√≥ vagy nem tartozik a felhaszn√°l√≥ c√©g√©hez.");
      return res.status(404).json({ error: 'Az eszk√∂z nem tal√°lhat√≥ vagy nem tartozik a v√°llalat√°hoz.' });
    }

    // **Friss√≠t√©shez sz√ºks√©ges adatok el≈ëk√©sz√≠t√©se**
    let updatedFields = { ...req.body };

    // **üîπ T√∂r√∂lj√ºk a CreatedBy mez≈ët, hogy ne m√≥dosuljon**
    delete updatedFields.CreatedBy;

    // **üîπ Zone √©s Site ObjectId konverzi√≥**
    if (req.body.Zone) {
      if (mongoose.Types.ObjectId.isValid(req.body.Zone)) {
        updatedFields.Zone = new mongoose.Types.ObjectId(req.body.Zone);
      } else {
        console.log("‚ùå HIBA: A megadott Zone nem √©rv√©nyes ObjectId.");
        return res.status(400).json({ error: '√ârv√©nytelen Zone azonos√≠t√≥ form√°tum.' });
      }
    }

    if (req.body.Site) {
      if (mongoose.Types.ObjectId.isValid(req.body.Site)) {
        updatedFields.Site = new mongoose.Types.ObjectId(req.body.Site);
      } else {
        console.log("‚ùå HIBA: A megadott Site nem √©rv√©nyes ObjectId.");
        return res.status(400).json({ error: '√ârv√©nytelen Site azonos√≠t√≥ form√°tum.' });
      }
    }

    // **üîπ ModifiedBy biztos√≠t√°sa**
    updatedFields.ModifiedBy = new mongoose.Types.ObjectId(ModifiedBy);

    console.log("‚úÖ M√≥dos√≠tott adatok (ment√©s el≈ëtt):", updatedFields);

    // **Friss√≠t√©s az adatb√°zisban**
    const updatedEquipment = await Equipment.findByIdAndUpdate(
      id,
      { $set: updatedFields },
      { new: true, runValidators: true, context: { userId: ModifiedBy } }
    );

    if (!updatedEquipment) {
      console.log("‚ùå Sikertelen friss√≠t√©s, nincs tal√°lat.");
      return res.status(404).json({ error: 'Nem siker√ºlt m√≥dos√≠tani az eszk√∂zt.' });
    }

    console.log("‚úÖ Equipment sikeresen friss√≠tve:", updatedEquipment);
    return res.json(updatedEquipment);
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt az eszk√∂z m√≥dos√≠t√°sakor:", error);
    return res.status(500).json({ error: 'Nem siker√ºlt m√≥dos√≠tani az eszk√∂zt.' });
  }
};

// T√∂rl√©s (DELETE /exreg/:id)
exports.deleteEquipment = async (req, res) => {
  const { id } = req.params;
  try {
    if (!req.user || !req.user.company) {
      return res.status(401).json({ error: 'Nincs bejelentkezett felhaszn√°l√≥ vagy hi√°nyz√≥ c√©gadatok.' });
    }

    const deletedEquipment = await Equipment.findOneAndDelete({ _id: id, Company: req.user.company });

    if (!deletedEquipment) {
      return res.status(404).json({ error: 'Az eszk√∂z nem tal√°lhat√≥ vagy nem tartozik a v√°llalat√°hoz.' });
    }

    return res.json({ message: 'Az eszk√∂z sikeresen t√∂r√∂lve.' });
  } catch (error) {
    console.error('Hiba t√∂rt√©nt az eszk√∂z t√∂rl√©sekor:', error);
    return res.status(500).json({ error: 'Nem siker√ºlt t√∂r√∂lni az eszk√∂zt.' });
  }
};

// Gy√°rt√≥k lek√©rdez√©se (GET /api/manufacturers)
exports.getManufacturers = async (req, res) => {
  try {
      const manufacturers = await Equipment.distinct("Manufacturer"); // Egyedi gy√°rt√≥k lek√©r√©se
      res.json(manufacturers);
  } catch (error) {
      console.error("Error fetching manufacturers:", error);
      res.status(500).json({ error: "Server error while fetching manufacturers." });
  }
};