const fs = require('fs');
const path = require('path');
const { Document, Packer, Paragraph, TextRun, Table, TableRow, TableCell, WidthType } = require("docx");

/**
 * üìÑ OCR sz√∂veg form√°z√°sa √©s DOCX f√°jl gener√°l√°sa
 * A form√°z√°s ATEX vagy IECEx tan√∫s√≠tv√°ny t√≠pus√°t√≥l f√ºgg≈ëen v√°ltozik.
 * @param {string} ocrText - Az OCR √°ltal felismert nyers sz√∂veg
 * @param {string} certNo - A tan√∫s√≠tv√°ny sz√°ma (f√°jln√©vhez)
 * @param {string} certType - A tan√∫s√≠tv√°ny t√≠pusa ("ATEX" vagy "IECEx")
 * @param {string|null} outputPath - Opcion√°lis: a gener√°lt f√°jl el√©r√©si √∫tja
 * @returns {string} - A gener√°lt DOCX f√°jl el√©r√©si √∫tja
 */
async function generateDocxFile(ocrText, certNo, certType, outputPath = null) {
    try {
        console.log(`üìÑ OCR sz√∂veg form√°z√°sa... T√≠pus: ${certType}`);

        // üöÄ 1. Sz√∂veg el≈ëk√©sz√≠t√©se √©s tiszt√≠t√°sa
        let cleanedText = ocrText
        //    .replace(/\n{2,}/g, '\n') // T√∂bbsz√∂r√∂s √ºres sorok elt√°vol√≠t√°sa
        //    .replace(/\s{2,}/g, ' ')  // Extra sz√≥k√∂z√∂k elt√°vol√≠t√°sa
        //    .trim();

        // üöÄ 2. Sorok feldolgoz√°sa
        const lines = cleanedText.split("\n").map(line => line.trim()).filter(line => line.length > 0);

        let formattedParagraphs = [];
        let tableData = [];
        let specialConditions = [];

        // **ATEX tan√∫s√≠tv√°ny eset√©n c√≠msorok azonos√≠t√°sa** ([3], (4) form√°tum)
        const atexHeadingRegex = /^(\(|\[)\d+(\)|\])\s*(.+?):\s*(.*)$/; 
        // P√©lda: "(3) EC-Type Examination Certificate Number: XYZ"

        // IECEx √©s ATEX kulcsszavak
        const keyLabels = {
            ATEX: ["EC-Type Examination Certificate Number", "Equipment", "Manufacturer", "Address"],
            IECEx: ["Certificate No.", "Status", "Date of Issue", "Applicant", "Manufacturer", "Equipment", "Ex Marking", "Protection"]
        };

        // Technikai adatokhoz kulcsszavak
        const technicalDataKeywords = ["Power", "Size", "Weight", "Temperature", "W", "¬∞C", "Hz", "IP"];

        // üöÄ 3. Sz√∂veg feldolgoz√°sa
        lines.forEach((line) => {
            if (certType === "ATEX") {
                // ATEX eset√©n ellen≈ërizz√ºk, hogy a sor c√≠msor-e ([3], (4) form√°tum)
                const atexMatch = line.match(atexHeadingRegex);
                if (atexMatch) {
                    formattedParagraphs.push(new Paragraph({
                        children: [
                            new TextRun({ text: `üìå ${atexMatch[3]}: `, bold: true, color: "0000FF" }), // **F√©lk√∂v√©r √©s k√©k c√≠msor**
                            new TextRun({ text: atexMatch[4] || "" }) // C√≠m √©rt√©ke norm√°l sz√∂vegk√©nt
                        ],
                        spacing: { after: 200 }
                    }));
                    return;
                }
            }

            // IECEx eset√©n ellen≈ërizz√ºk a c√≠msorokat
            const [key, ...values] = line.split(":");
            const value = values.join(":").trim();

            if (keyLabels[certType] && keyLabels[certType].includes(key.trim())) {
                formattedParagraphs.push(new Paragraph({
                    children: [
                        new TextRun({ text: `${key}: `, bold: true }), // **F√©lk√∂v√©r c√≠msor**
                        new TextRun({ text: value })
                    ],
                    spacing: { after: 200 }
                }));
            } else if (technicalDataKeywords.some(keyword => line.includes(keyword))) {
                // Technikai adatok t√°bl√°zathoz gy≈±jt√©se
                const rowData = line.split(/\s{2,}/).map(item => item.trim());
                if (rowData.length > 1) {
                    tableData.push(rowData);
                }
            } else if (line.toLowerCase().includes("special conditions")) {
                // **"Special Conditions" kiemel√©se, de a hely√©n marad**
                specialConditions.push(new Paragraph({
                    children: [new TextRun({ text: `‚ö†Ô∏è ${line}`, bold: true, color: "FF0000" })],
                    spacing: { after: 150 }
                }));
                formattedParagraphs.push(new Paragraph({
                    children: [new TextRun({ text: line, bold: true, color: "FF0000" })],
                    spacing: { after: 150 }
                }));
            } else {
                // **Norm√°l bekezd√©s**
                formattedParagraphs.push(new Paragraph({
                    children: [new TextRun(line)],
                    spacing: { after: 100 }
                }));
            }
        });

        // üöÄ 4. Technikai adatok t√°bl√°zatba foglal√°sa (ha van)
        let table = null;
        if (tableData.length > 0) {
            const tableRows = tableData.map(row => new TableRow({
                children: row.map(cellText => new TableCell({
                    width: { size: 30, type: WidthType.PERCENTAGE },
                    children: [new Paragraph(cellText)]
                }))
            }));

            table = new Table({
                rows: [
                    new TableRow({
                        children: tableData[0].map(header => new TableCell({
                            width: { size: 30, type: WidthType.PERCENTAGE },
                            children: [new Paragraph({ children: [new TextRun({ text: header, bold: true })] })]
                        }))
                    }),
                    ...tableRows.slice(1)
                ]
            });
        }

        // üöÄ 5. DOCX dokumentum l√©trehoz√°sa
        const doc = new Document({
            sections: [
                {
                    properties: {},
                    children: [
                        new Paragraph({
                            children: [new TextRun({ text: `Certificate: ${certNo} (${certType})`, bold: true, size: 32 })],
                            spacing: { after: 300 }
                        }),
                        ...(table ? [table] : []), // Ha van t√°bl√°zat, adjuk hozz√°
                        ...formattedParagraphs
                    ]
                }
            ]
        });

        // üìÑ F√°jl ment√©se
        const docxFilePath = outputPath || path.join(__dirname, `../uploads/${certNo}_${certType}_extracted.docx`);
        const buffer = await Packer.toBuffer(doc);
        fs.writeFileSync(docxFilePath, buffer);

        console.log(`‚úÖ DOCX f√°jl sikeresen gener√°lva: ${docxFilePath}`);
        return docxFilePath;
    } catch (error) {
        console.error("‚ùå Hiba a DOCX gener√°l√°sa sor√°n:", error);
        throw error;
    }
}

module.exports = { generateDocxFile };